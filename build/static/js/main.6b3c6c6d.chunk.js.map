{"version":3,"sources":["components/Tweet.js","components/TweetList.js","components/CreateTweet.js","App.js","reportWebVitals.js","index.js"],"names":["Tweet","name","tweet","tweets","setTweets","className","message","onClick","filter","state","id","TweetList","map","CreateTweet","textInput","setTextInput","onSubmit","e","preventDefault","uuidv4","value","onChange","target","rows","cols","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qMAiBeA,G,MAdD,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,UAIpC,OACE,sBAAKC,UAAU,QAAf,UACE,6BAAKJ,IACL,6BAAKC,EAAMI,UACX,wBAAQC,QAPQ,WAClBH,EAAUD,EAAOK,QAAO,SAACC,GAAD,OAAWA,EAAMC,KAAOR,EAAMQ,QAMpD,oBACA,+CCQSC,EAhBG,SAAC,GAAiC,IAA/BV,EAA8B,EAA9BA,KAAME,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,UACjC,OACE,qBAAKC,UAAU,aAAf,SACGF,EAAOS,KAAI,SAACV,GAAD,OACV,cAAC,EAAD,CACEE,UAAWA,EACXH,KAAMA,EACNC,MAAOA,EACPC,OAAQA,GACHD,EAAMQ,U,eCeNG,EAzBK,SAAC,GAAoD,IAAlDV,EAAiD,EAAjDA,OAAQC,EAAyC,EAAzCA,UAAWU,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAWnD,OACE,uBAAMC,SANmB,SAACC,GAC1BA,EAAEC,iBACFd,EAAU,GAAD,mBAAKD,GAAL,CAAa,CAAEG,QAASQ,EAAWJ,GAAIS,kBAChDJ,EAAa,KAGb,UACE,0BACEK,MAAON,EACPO,SAbmB,SAACJ,GACxBF,EAAaE,EAAEK,OAAOF,QAalBG,KAAK,IACLC,KAAK,OAEP,uBACA,gDCESC,MApBf,WAAe,MAEWC,mBAAS,YAFpB,mBAENzB,EAFM,aAGqByB,mBAAS,KAH9B,mBAGNZ,EAHM,KAGKC,EAHL,OAIeW,mBAAS,IAJxB,mBAINvB,EAJM,KAIEC,EAJF,KAOb,OACE,sBAAKC,UAAU,MAAf,UACE,cAAC,EAAD,CACES,UAAWA,EACXC,aAAcA,EACdZ,OAAQA,EACRC,UAAWA,IAEb,cAAC,EAAD,CAAWH,KAAMA,EAAME,OAAQA,EAAQC,UAAWA,QCRzCuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6b3c6c6d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/Tweet.scss\";\r\n\r\nconst Tweet = ({ name, tweet, tweets, setTweets }) => {\r\n  const deleteTweet = () => {\r\n    setTweets(tweets.filter((state) => state.id !== tweet.id));\r\n  };\r\n  return (\r\n    <div className=\"tweet\">\r\n      <h2>{name}</h2>\r\n      <h3>{tweet.message}</h3>\r\n      <button onClick={deleteTweet}>Delete</button>\r\n      <button>Like</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tweet;\r\n","import React from \"react\";\r\n\r\nimport Tweet from \"./Tweet\";\r\n\r\nconst TweetList = ({ name, tweets, setTweets }) => {\r\n  return (\r\n    <div className=\"tweet-list\">\r\n      {tweets.map((tweet) => (\r\n        <Tweet\r\n          setTweets={setTweets}\r\n          name={name}\r\n          tweet={tweet}\r\n          tweets={tweets}\r\n          key={tweet.id}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TweetList;\r\n","import React from \"react\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst CreateTweet = ({ tweets, setTweets, textInput, setTextInput }) => {\r\n  // Functions\r\n  const userInputHandler = (e) => {\r\n    setTextInput(e.target.value);\r\n  };\r\n\r\n  const submitTweetHandler = (e) => {\r\n    e.preventDefault();\r\n    setTweets([...tweets, { message: textInput, id: uuidv4() }]);\r\n    setTextInput(\"\");\r\n  };\r\n  return (\r\n    <form onSubmit={submitTweetHandler}>\r\n      <textarea\r\n        value={textInput}\r\n        onChange={userInputHandler}\r\n        rows=\"5\"\r\n        cols=\"50\"\r\n      ></textarea>\r\n      <br />\r\n      <button>Submit</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default CreateTweet;\r\n","import React, { useState } from \"react\";\n\nimport TweetList from \"./components/TweetList\";\nimport CreateTweet from \"./components/CreateTweet\";\n\nfunction App() {\n  // State\n  const [name, setName] = useState(\"Dev BigD\");\n  const [textInput, setTextInput] = useState(\"\");\n  const [tweets, setTweets] = useState([]);\n  const message = \"Hubo\";\n\n  return (\n    <div className=\"App\">\n      <CreateTweet\n        textInput={textInput}\n        setTextInput={setTextInput}\n        tweets={tweets}\n        setTweets={setTweets}\n      />\n      <TweetList name={name} tweets={tweets} setTweets={setTweets}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}